{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Controller.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Controller is Ownable {\n\t//--------------------------------------------------------------\n\n\tevent Deposit(address indexed sender, uint256 amount);\n\tevent RewardClaimed(address indexed receiver, uint256 reward);\n\n\tevent NewTraining(uint256 id, string name);\n\tevent NewWoman(address indexed wallet);\n\n\tevent ApprovedTraining(address indexed wallet, uint256 id);\n\n\t//--------------------------------------------------------------\n\n\tmapping(address => string) public birthProof;\n\n\tstruct Training {\n\t\tuint256 id;\n\t\tstring name;\n\t}\n\tTraining[] public trainings;\n\tuint256 public lastTrainingID = 0;\n\n\tmapping(address => uint256[]) public approved;\n\n\tuint256 public reward;\n\tuint256 public minTrainingsForReward;\n\tuint256 public minTimeForWithdrawal;\n\n\tmapping(address => uint256) public trainingCount;\n\tmapping(address => uint256) public trainingTimestamp;\n\n\t//--------------------------------------------------------------\n\n\tconstructor(address initialOwner) Ownable(initialOwner) {}\n\n\t//--------------------------------------------------------------\n\n\treceive() external payable {\n\t\trequire(msg.value > 0, \"No funds were sent\");\n\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\tfunction deposit() external payable {\n\t\trequire(msg.value > 0, \"No funds were sent\");\n\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\t//--------------------------------------------------------------\n\n\tfunction setReward(uint256 amount) public onlyOwner {\n\t\treward = amount;\n\t}\n\n\tfunction setMinTrainingsForReward(uint256 number) public onlyOwner {\n\t\tminTrainingsForReward = number;\n\t}\n\n\tfunction setMinTimeForWithdrawal(uint256 time) public onlyOwner {\n\t\tminTimeForWithdrawal = time;\n\t}\n\n\t//--------------------------------------------------------------\n\n\tfunction addTraining(string calldata name) public onlyOwner {\n\t\tuint256 id = lastTrainingID++;\n\t\ttrainings.push(Training({ id: id, name: name }));\n\t\temit NewTraining(id, name);\n\t}\n\n\t//--------------------------------------------------------------\n\n\tfunction addWoman(address wallet, string calldata proof) public onlyOwner {\n\t\tbirthProof[wallet] = proof;\n\t\temit NewWoman(wallet);\n\t}\n\n\t//--------------------------------------------------------------\n\n\tfunction approvedTraining(address wallet, uint256 id) public onlyOwner {\n\t\tapproved[wallet].push(id);\n\n\t\ttrainingCount[wallet]++;\n\n\t\tif (trainingCount[wallet] == 1) {\n\t\t\ttrainingTimestamp[wallet] = block.timestamp;\n\t\t}\n\n\t\temit ApprovedTraining(wallet, id);\n\t}\n\n\t//--------------------------------------------------------------\n\n\tfunction withdraw() public {\n\t\taddress payable receiver = payable(msg.sender);\n\n\t\t// Checks\n\n\t\trequire(owner() != receiver, \"Cannot withdraw to owner\");\n\n\t\trequire(\n\t\t\ttrainingCount[receiver] >= minTrainingsForReward,\n\t\t\t\"Not enough trainings completed for reward\"\n\t\t);\n\n\t\trequire(\n\t\t\tblock.timestamp >= trainingTimestamp[receiver] + minTimeForWithdrawal,\n\t\t\t\"Withdrawal time not reached\"\n\t\t);\n\n\t\trequire(address(this).balance >= reward, \"Not enough funds in contract\");\n\n\t\t// Reset\n\n\t\ttrainingCount[receiver] = 0;\n\t\ttrainingTimestamp[receiver] = 0;\n\n\t\t// Transfer\n\n\t\t(bool success, ) = receiver.call{ value: reward }(\"\");\n\t\trequire(success, \"Transfer failed\");\n\n\t\temit RewardClaimed(receiver, reward);\n\t}\n\n\t//--------------------------------------------------------------\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}